// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/17/2020 12:21:05"
                                                                                
// Verilog Test Bench template for design : uart2bus_top
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module uart2bus_top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg reset;
reg ser_in;
// wires                                               
wire ce_1;
wire new_rx_data;
wire ser_out;
reg [4:0] i;

// assign statements (if any)                          
uart2bus_top i1 (
// port map - connection between master ports and signals/registers   
	.ce_1(ce_1),
	.clock(clock),
	.new_rx_data(new_rx_data),
	.reset(reset),
	.ser_in(ser_in),
	.ser_out(ser_out)
);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  	clock = 1'b0;
	reset = 1'b0;
	#100 reset = 1'b1;
//   baud_freq = 12'd576;
//	baud_limit = 16'd15049;
	//i = 5'd0;
	//ser_in = 1'b0;
	forever #10 clock = ~ clock;                                                     
// --> end                                             
$display("Running testbench");                       
end 



always @ (posedge clock)                                                
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
   case(i)
	 0:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 1:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 2:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 3:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 4:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 5:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 6:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 7:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 8:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 9:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 10:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 11:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 12:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 13:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 14:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 15:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 16:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 17:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b1;
		end
	 18:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 19:
		begin
			if(ce_1)
				i <= i + 5'd1;
			else
				ser_in <= 1'b0;
		end
	 default:
		begin
			i <= 5'd0;
			ser_in <= 1'd0;
		end
	 endcase                                                    
//@eachvec;                                              
// --> end                                             
end                                                                        
endmodule

