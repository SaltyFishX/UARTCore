// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/16/2020 16:26:11"
                                                                                
// Verilog Test Bench template for design : uart_top
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module uart_top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [11:0] baud_freq;
reg [15:0] baud_limit;
reg clock;
reg reset;
reg ser_in;
reg [7:0] tx_data;
// wires                                               
wire baud_clk;
wire new_rx_data;
wire rx_busy;
wire [7:0]  rx_data;
wire ser_out;
wire tx_busy;

// assign statements (if any)                          
uart_top i1 (
// port map - connection between master ports and signals/registers   
	.baud_clk(baud_clk),
	.baud_freq(baud_freq),
	.baud_limit(baud_limit),
	.clock(clock),
	.new_rx_data(new_rx_data),
	.reset(reset),
	.rx_busy(rx_busy),
	.rx_data(rx_data),
	.ser_in(ser_in),
	.ser_out(ser_out),
	.tx_busy(tx_busy),
	.tx_data(tx_data)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

